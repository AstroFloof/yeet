// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package yeet

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type S3 struct {
	_tab flatbuffers.Table
}

func GetRootAsS3(buf []byte, offset flatbuffers.UOffsetT) *S3 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &S3{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsS3(buf []byte, offset flatbuffers.UOffsetT) *S3 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &S3{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *S3) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *S3) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *S3) Filter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *S3) Bucket() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *S3) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *S3) Secret() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *S3) Endpoint() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *S3) Region() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func S3Start(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func S3AddFilter(builder *flatbuffers.Builder, filter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(filter), 0)
}
func S3AddBucket(builder *flatbuffers.Builder, bucket flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bucket), 0)
}
func S3AddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(key), 0)
}
func S3AddSecret(builder *flatbuffers.Builder, secret flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(secret), 0)
}
func S3AddEndpoint(builder *flatbuffers.Builder, endpoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(endpoint), 0)
}
func S3AddRegion(builder *flatbuffers.Builder, region flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(region), 0)
}
func S3End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
